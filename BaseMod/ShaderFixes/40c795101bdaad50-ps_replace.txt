// ---- Created with 3Dmigoto v1.3.16 on Sun Dec 19 19:33:00 2021
Texture2D<float4> t0 : register(t0);

cbuffer cb0 : register(b0)
{
  float4 cb0[21];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : TEXCOORD0,
  float4 v1 : SV_POSITION0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = (int4)cb0[19].xyzw;
  r1.xyzw = (int4)v1.xyxy;
  r1.xyzw = (uint4)r1.xyzw << int4(1,1,1,1);
  r0.xyzw = (int4)r0.xyzw + (int4)r1.zwzw;
  r2.xy = r0.zw;
  r2.zw = float2(0,0);
  r2.xzw = t0.Load(r2.xyz).xzw;
  r2.y = r2.x * r2.x;
  r0.zw = float2(0,0);
  r0.xzw = t0.Load(r0.xyz).xzw;
  r2.w = abs(r2.w) + -abs(r0.w);
  r3.x = 0.00200000009 * abs(r2.w);
  r2.w = max(1, abs(r2.w));
  r4.xy = rcp(r2.ww);
  r2.w = max(1, r3.x);
  r4.z = rcp(r2.w);
  r0.y = r0.x * r0.x;
  r0.xyz = r4.yyz * r2.xyz + r0.xyz;
  r2.xyz = float3(1,1,1) + r4.xyz;
  r3.xyzw = (int4)cb0[20].xyzw;
  r1.xyzw = (int4)r1.zwxy + (int4)r3.zwxy;
  r3.xy = r1.zw;
  r3.zw = float2(0,0);
  r3.xzw = t0.Load(r3.xyz).xzw;
  r3.y = r3.x * r3.x;
  r2.w = abs(r3.w) + -abs(r0.w);
  r3.w = 0.00200000009 * abs(r2.w);
  r2.w = max(1, abs(r2.w));
  r4.xy = rcp(r2.ww);
  r2.w = max(1, r3.w);
  r4.z = rcp(r2.w);
  r0.xyz = r4.yyz * r3.xyz + r0.xyz;
  r2.xyz = r4.xyz + r2.xyz;
  r1.zw = float2(0,0);
  r1.xzw = t0.Load(r1.xyz).xzw;
  r1.y = r1.x * r1.x;
  r1.w = abs(r1.w) + -abs(r0.w);
  o0.w = abs(r0.w);
  r0.w = 0.00200000009 * abs(r1.w);
  r1.w = max(1, abs(r1.w));
  r3.xy = rcp(r1.ww);
  r0.w = max(1, r0.w);
  r3.z = rcp(r0.w);
  r0.xyz = r3.yyz * r1.xyz + r0.xyz;
  r1.xyz = r3.xyz + r2.xyz;
  r1.xyz = rcp(r1.xyz);
  o0.xyz = r1.xyz * r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sun Dec 19 19:33:00 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float
// SV_POSITION              0   xyzw        1      POS   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[21], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps_siv linear noperspective v1.xy, position
dcl_output o0.xyzw
dcl_temps 5
ftoi r0.xyzw, cb0[19].xyzw
ftoi r1.xyzw, v1.xyxy
ishl r1.xyzw, r1.xyzw, l(1, 1, 1, 1)
iadd r0.xyzw, r0.xyzw, r1.zwzw
mov r2.xy, r0.zwzz
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xzw, r2.xyzw, t0.xyzw
mul r2.y, r2.x, r2.x
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.xzw, r0.xyzw, t0.xyzw
add r2.w, -|r0.w|, |r2.w|
mul r3.x, |r2.w|, l(0.002000)
max r2.w, |r2.w|, l(1.000000)
rcp r4.xy, r2.wwww
max r2.w, r3.x, l(1.000000)
rcp r4.z, r2.w
mul r0.y, r0.x, r0.x
mad r0.xyz, r4.yyzy, r2.xyzx, r0.xyzx
add r2.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
ftoi r3.xyzw, cb0[20].xyzw
iadd r1.xyzw, r1.zwxy, r3.zwxy
mov r3.xy, r1.zwzz
mov r3.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r3.xzw, r3.xyzw, t0.xyzw
mul r3.y, r3.x, r3.x
add r2.w, -|r0.w|, |r3.w|
mul r3.w, |r2.w|, l(0.002000)
max r2.w, |r2.w|, l(1.000000)
rcp r4.xy, r2.wwww
max r2.w, r3.w, l(1.000000)
rcp r4.z, r2.w
mad r0.xyz, r4.yyzy, r3.xyzx, r0.xyzx
add r2.xyz, r2.xyzx, r4.xyzx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.xzw, r1.xyzw, t0.xyzw
mul r1.y, r1.x, r1.x
add r1.w, -|r0.w|, |r1.w|
mov o0.w, |r0.w|
mul r0.w, |r1.w|, l(0.002000)
max r1.w, |r1.w|, l(1.000000)
rcp r3.xy, r1.wwww
max r0.w, r0.w, l(1.000000)
rcp r3.z, r0.w
mad r0.xyz, r3.yyzy, r1.xyzx, r0.xyzx
add r1.xyz, r2.xyzx, r3.xyzx
rcp r1.xyz, r1.xyzx
mul o0.xyz, r0.xyzx, r1.xyzx
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
